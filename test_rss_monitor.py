import unittest
import sqlite3
import tempfile
import os
import sys
from unittest.mock import patch, Mock, MagicMock
from flask import Flask

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–æ–¥—É–ª—é
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from rss_monitor import RSSMonitor, app

class TestExceptionHandling(unittest.TestCase):
    """
    –¢–µ—Å—Ç—ã –¥–ª—è Issue #2: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–∏–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ "–°–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∫–æ–¥" –≥–ª. 22.3:
    """
    
    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.temp_db = tempfile.NamedTemporaryFile(delete=False, suffix='.db')
        self.temp_db.close()
        self.monitor = RSSMonitor(self.temp_db.name)
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        if os.path.exists(self.temp_db.name):
            os.unlink(self.temp_db.name)
    
    def test_init_db_with_invalid_path(self):
        """
        –ü—Ä–∏–µ–º: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ë–î
        –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞—Ç—å –ë–î
        """
        invalid_path = "/root/restricted/invalid.db"
        with self.assertRaises((sqlite3.OperationalError, PermissionError)):
            monitor = RSSMonitor(invalid_path)
    
    def test_init_db_with_readonly_path(self):
        """
        –ü—Ä–∏–µ–º: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –ë–î —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
        """
        # –°–æ–∑–¥–∞–µ–º readonly —Ñ–∞–π–ª
        readonly_db = tempfile.NamedTemporaryFile(delete=False, suffix='.db')
        readonly_db.close()
        os.chmod(readonly_db.name, 0o444)  # –¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ
        
        try:
            with self.assertRaises(sqlite3.OperationalError):
                monitor = RSSMonitor(readonly_db.name)
                monitor.init_db()
        finally:
            os.chmod(readonly_db.name, 0o644)
            os.unlink(readonly_db.name)
    
    @patch('sqlite3.connect')
    def test_get_active_feeds_db_connection_error(self, mock_connect):
        """
        –ü—Ä–∏–µ–º: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º mock –æ–±—ä–µ–∫—Ç–æ–≤
        –ú–æ–¥–µ–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        """
        mock_connect.side_effect = sqlite3.Error("Database connection failed")
        
        with self.assertRaises(sqlite3.Error):
            self.monitor.get_active_feeds()
    
    @patch('sqlite3.connect')
    def test_get_active_keywords_cursor_error(self, mock_connect):
        """
        –ü—Ä–∏–µ–º: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π - –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        """
        mock_conn = Mock()
        mock_cursor = Mock()
        mock_cursor.execute.side_effect = sqlite3.Error("Query execution failed")
        mock_conn.cursor.return_value = mock_cursor
        mock_connect.return_value = mock_conn
        
        with self.assertRaises(sqlite3.Error):
            self.monitor.get_active_keywords()
    
    @patch('feedparser.parse')
    def test_parse_feed_network_error(self, mock_parse):
        """
        –ü—Ä–∏–µ–º: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞
        """
        mock_parse.side_effect = Exception("Network timeout")
        
        # –¢–µ—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–∞–¥–∞—Ç—å, –∞ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É
        try:
            self.monitor.parse_feed("Test Feed", "http://invalid.url", ["test"])
        except Exception as e:
            self.fail(f"parse_feed –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏, –Ω–æ —É–ø–∞–ª —Å: {e}")
    
    @patch('feedparser.parse')
    def test_parse_feed_malformed_xml(self, mock_parse):
        """
        –ü—Ä–∏–µ–º: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π XML
        """
        mock_feed = Mock()
        mock_feed.bozo = True
        mock_feed.bozo_exception = Exception("XML parsing error")
        mock_feed.entries = []
        mock_parse.return_value = mock_feed
        
        # –î–æ–ª–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –±–µ–∑ –ø–∞–¥–µ–Ω–∏—è
        self.monitor.parse_feed("Test Feed", "http://test.url", ["keyword"])
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑–æ–≤ –Ω–µ –ø—Ä–∏–≤–µ–ª –∫ –∏—Å–∫–ª—é—á–µ–Ω–∏—é
        self.assertTrue(True)
    
    def test_clean_html_with_none_input(self):
        """
        –ü—Ä–∏–µ–º: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π - None –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        result = self.monitor.clean_html(None)
        self.assertEqual(result, "")
    
    def test_clean_html_with_empty_string(self):
        """
        –ü—Ä–∏–µ–º: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π - –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        result = self.monitor.clean_html("")
        self.assertEqual(result, "")


class TestInputValidation(unittest.TestCase):
    """
    –¢–µ—Å—Ç—ã –¥–ª—è Issue #5: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    
    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Flask"""
        self.app = app
        self.app.config['TESTING'] = True
        self.client = self.app.test_client()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        self.temp_db = tempfile.NamedTemporaryFile(delete=False, suffix='.db')
        self.temp_db.close()
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        if os.path.exists(self.temp_db.name):
            os.unlink(self.temp_db.name)
    
    def test_add_feed_with_empty_name(self):
        """
        –ü—Ä–∏–µ–º: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π - –ø—É—Å—Ç–æ–µ –∏–º—è —Ñ–∏–¥–∞
        """
        response = self.client.post('/add_feed', data={
            'name': '',
            'url': 'https://example.com/feed.xml'
        })
        # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        self.assertEqual(response.status_code, 302)  # –†–µ–¥–∏—Ä–µ–∫—Ç
    
    def test_add_feed_with_none_name(self):
        """
        –ü—Ä–∏–µ–º: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NULL –∑–Ω–∞—á–µ–Ω–∏–π - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –∏–º—è
        """
        response = self.client.post('/add_feed', data={
            'url': 'https://example.com/feed.xml'
        })
        self.assertEqual(response.status_code, 302)
    
    def test_add_feed_with_invalid_url_format(self):
        """
        –ü—Ä–∏–µ–º: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL
        """
        response = self.client.post('/add_feed', data={
            'name': 'Test Feed',
            'url': 'not-a-valid-url'
        })
        # –î–æ–ª–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
        self.assertIn(response.status_code, [200, 302, 400])
    
    def test_add_feed_with_extremely_long_name(self):
        """
        –ü—Ä–∏–µ–º: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π - —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è
        """
        long_name = 'A' * 10000  # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è
        response = self.client.post('/add_feed', data={
            'name': long_name,
            'url': 'https://example.com/feed.xml'
        })
        self.assertEqual(response.status_code, 302)
    
    def test_add_keyword_with_empty_value(self):
        """
        –ü—Ä–∏–µ–º: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π - –ø—É—Å—Ç–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        """
        response = self.client.post('/add_keyword', data={
            'keyword': ''
        })
        self.assertEqual(response.status_code, 302)
    
    def test_add_keyword_with_special_characters(self):
        """
        –ü—Ä–∏–µ–º: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ - –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —Å–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏
        """
        special_keyword = '"><script>alert("xss")</script>'
        response = self.client.post('/add_keyword', data={
            'keyword': special_keyword
        })
        self.assertEqual(response.status_code, 302)
    
    def test_add_keyword_with_unicode_characters(self):
        """
        –ü—Ä–∏–µ–º: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ - Unicode —Å–∏–º–≤–æ–ª—ã
        """
        unicode_keyword = '—Ç–µ—Å—Ç ÊµãËØï üîç'
        response = self.client.post('/add_keyword', data={
            'keyword': unicode_keyword
        })
        self.assertEqual(response.status_code, 302)
    
    def test_check_keywords_in_text_with_none_input(self):
        """
        –ü—Ä–∏–µ–º: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NULL –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        """
        monitor = RSSMonitor(self.temp_db.name)
        result = monitor.check_keywords_in_text(None, ['test'])
        self.assertEqual(result, [])


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    unittest.main(verbosity=2)